package com.example.apprafal.ui

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.apprafal.R
import com.example.apprafal.data.AppDatabase
import com.example.apprafal.data.GamePickRepo
import com.example.apprafal.data.GameSessionRepo
import com.example.apprafal.data.PlayerRepo
import kotlinx.coroutines.launch

class GameHistoryActivity : AppCompatActivity() {

    private lateinit var sessionViewModel: GameSessionViewModel
    private val playerRepo = PlayerRepo(AppDatabase.getDatabase(this).playerDao())
    private val pickRepo = GamePickRepo(AppDatabase.getDatabase(this).gamePickDao())
    private val database = AppDatabase.getDatabase(this)
    private val sessionDao = database.gameSessionDao()
    private val participantDao = database.gameSessionParticipantDao()
    private val sessionRepo = GameSessionRepo(sessionDao, participantDao)

    private val factory = GameSessionViewModelFactory(sessionRepo, playerRepo, pickRepo)

    private var sessionId: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_game_history)

        sessionId = intent.getStringExtra("sessionId")
        Log.d("HISTORY_DEBUG", "üèÅ GameHistoryActivity started with sessionId: $sessionId")

        if (sessionId != null) {
            Log.d("HISTORY_DEBUG", "‚úÖ U≈ºywam przekazanego sessionId: $sessionId")
            setupHistoryView()
        } else {
            Log.d("HISTORY_DEBUG", "‚ö†Ô∏è Brak sessionId, szukam najnowszej sesji...")
            findLatestSession()
        }
    }

    private fun findLatestSession() {
        lifecycleScope.launch {
            try {
                val latestSession = sessionRepo.getLatestSession()

                if (latestSession != null) {
                    sessionId = latestSession.id
                    Log.d("HISTORY_DEBUG", "‚úÖ Znaleziono najnowszƒÖ sesjƒô: $sessionId")
                    runOnUiThread {
                        setupHistoryView()
                    }
                } else {
                    Log.d("HISTORY_DEBUG", "‚ùå Brak sesji w bazie!")
                    runOnUiThread {
                        showNoGamesState()
                    }
                }
            } catch (e: Exception) {
                Log.e("HISTORY_DEBUG", "‚ùå B≈ÇƒÖd podczas szukania sesji: ${e.message}", e)
                runOnUiThread {
                    Toast.makeText(
                        this@GameHistoryActivity,
                        "B≈ÇƒÖd: ${e.message}",
                        Toast.LENGTH_SHORT
                    ).show()
                    showNoGamesState()
                }
            }
        }
    }

    private fun setupHistoryView() {
        val recyclerView = findViewById<RecyclerView>(R.id.historyRecyclerView)
        val undoButton = findViewById<Button>(R.id.undoLastPickButton)
        val emptyView = findViewById<TextView>(R.id.emptyHistoryText)

        // PROSTY ADAPTER
        val sessionAdapter = GameSessionListAdapter()
        recyclerView.adapter = sessionAdapter
        recyclerView.layoutManager = LinearLayoutManager(this)

        Log.d("HISTORY_DEBUG", "üîç ≈Åadowanie 5 ostatnich sesji...")

        // U≈ªYCIE TWOJEJ METODY getLast5Sessions()
        lifecycleScope.launch {
            try {
                val sessions = sessionRepo.getLast5Sessions()
                Log.d("HISTORY_DEBUG", "üìã Otrzymano ${sessions.size} sesji")

                runOnUiThread {
                    if (sessions.isEmpty()) {
                        showNoGamesState()
                    } else {
                        recyclerView.visibility = View.VISIBLE
                        emptyView.visibility = View.GONE

                        // Po prostu przeka≈º List<GameSession> do adaptera
                        sessionAdapter.submitList(sessions)
                        undoButton.isEnabled = sessions.isNotEmpty()

                        // Ustaw najnowszƒÖ sesjƒô dla undo
                        sessionId = sessions.firstOrNull()?.id

                        Log.d("HISTORY_DEBUG", "‚úÖ Wy≈õwietlono ${sessions.size} sesji")
                    }
                }
            } catch (e: Exception) {
                Log.e("HISTORY_DEBUG", "‚ùå B≈ÇƒÖd podczas ≈Çadowania sesji: ${e.message}", e)
                runOnUiThread {
                    showNoGamesState()
                }
            }
        }

        // Obs≈Çuga przycisku cofania (dla najnowszej sesji)
        undoButton.setOnClickListener {
            showUndoConfirmationDialog()
        }
    }


    // Obs≈Çuga braku gier
    private fun showNoGamesState() {
        val recyclerView = findViewById<RecyclerView>(R.id.historyRecyclerView)
        val emptyView = findViewById<TextView>(R.id.emptyHistoryText)

        recyclerView.visibility = View.GONE
        emptyView.visibility = View.VISIBLE
        emptyView.text = "Brak gier w historii"
    }

    private fun showUndoConfirmationDialog() {
        Log.d("HISTORY_DEBUG", "showUndoConfirmationDialog wywo≈Çane!")

        sessionViewModel = ViewModelProvider(this, factory)[GameSessionViewModel::class.java]

        if (sessionId == null) {
            Toast.makeText(this, "Brak aktywnej sesji", Toast.LENGTH_SHORT).show()
            return
        }


        lifecycleScope.launch {
            try {
                // Sprawd≈∫ czy w tej sesji sƒÖ jakie≈õ wybory do cofniƒôcia
                val sessionDetail = sessionViewModel.getSessionWithDetails(sessionId!!)
                val lastPick = sessionDetail?.picks?.maxByOrNull { it.pickOrder }

                if (lastPick == null) {
                    runOnUiThread {
                        Toast.makeText(
                            this@GameHistoryActivity,
                            "Brak wybor√≥w do cofniƒôcia w tej sesji",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                    return@launch
                }

                // Je≈õli jest co cofaƒá, poka≈º dialog potwierdzenia
                val database = AppDatabase.getDatabase(applicationContext)
                val player = database.playerDao().getById(lastPick.playerId)

                runOnUiThread {
                    AlertDialog.Builder(this@GameHistoryActivity)
                        .setTitle("Cofnij ostatni wyb√≥r")
                        .setMessage("Czy na pewno chcesz cofnƒÖƒá wyb√≥r gracza ${player.name}: ${lastPick.gameName}?\n\nSpowoduje to przywr√≥cenie kolejki do stanu z poczƒÖtku sesji.")
                        .setPositiveButton("Cofnij") { _, _ ->
                            performUndo()
                        }
                        .setNegativeButton("Anuluj", null)
                        .show()
                }
            } catch (e: Exception) {
                Log.e("HISTORY_DEBUG", "B≈ÇƒÖd podczas sprawdzania wybor√≥w: ${e.message}", e)
                runOnUiThread {
                    Toast.makeText(
                        this@GameHistoryActivity,
                        "B≈ÇƒÖd: ${e.message}",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }

    private fun performUndo() {
        lifecycleScope.launch {
            try {
                Log.d("HISTORY_DEBUG", "üîÑ Rozpoczƒôcie cofania wyboru...")

                val success = sessionViewModel.undoLastPick(sessionId!!)


                runOnUiThread {
                    if (success) {
                        Log.d("HISTORY_DEBUG", "‚úÖ Pomy≈õlnie cofniƒôto wyb√≥r i przywr√≥cono kolejkƒô")
                        Toast.makeText(
                            this@GameHistoryActivity,
                            "Cofniƒôto ostatni wyb√≥r i przywr√≥cono kolejkƒô",
                            Toast.LENGTH_SHORT
                        ).show()

                        findLatestSession()


                    } else {
                        Log.e("HISTORY_DEBUG", "‚ùå Nie uda≈Ço siƒô cofnƒÖƒá wyboru")
                        Toast.makeText(
                            this@GameHistoryActivity,
                            "Nie uda≈Ço siƒô cofnƒÖƒá wyboru",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("HISTORY_DEBUG", "‚ùå B≈ÇƒÖd podczas cofania: ${e.message}", e)
                runOnUiThread {
                    Toast.makeText(
                        this@GameHistoryActivity,
                        "B≈ÇƒÖd: ${e.message}",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }
}