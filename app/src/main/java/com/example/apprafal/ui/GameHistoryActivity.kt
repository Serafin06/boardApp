package com.example.apprafal.ui

import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.apprafal.R
import com.example.apprafal.data.AppDatabase
import com.example.apprafal.data.GamePickRepo
import com.example.apprafal.data.GameQueueRepo
import com.example.apprafal.data.PlayerRepo
import kotlinx.coroutines.launch

class GameHistoryActivity : AppCompatActivity() {

    private lateinit var adapter: GamePickListAdapter
    private lateinit var pickRepo: GamePickRepo
    private lateinit var queueRepo: GameQueueRepo
    private var sessionId: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_game_history)

        sessionId = intent.getStringExtra("sessionId")
        Log.d("HISTORY_DEBUG", "üèÅ GameHistoryActivity started with sessionId: $sessionId")

        if (sessionId == null) {
            Log.e("HISTORY_DEBUG", "‚ùå Brak sessionId!")
            finish()
            return
        }

        // Inicjalizacja widok√≥w
        val recyclerView = findViewById<RecyclerView>(R.id.historyRecyclerView)
        val undoButton = findViewById<Button>(R.id.undoLastPickButton) // Dodaj ten przycisk do layoutu

        adapter = GamePickListAdapter()
        recyclerView.adapter = adapter
        recyclerView.layoutManager = LinearLayoutManager(this)

        // Inicjalizacja repozytori√≥w
        val database = AppDatabase.getDatabase(applicationContext)
        val pickDao = database.gamePickDao()
        pickRepo = GamePickRepo(pickDao)

        val queueDao = database.gameQueueDao()
        queueRepo = GameQueueRepo(queueDao)

        val playerDao = database.playerDao()
        val playerRepo = PlayerRepo(playerDao)

        Log.d("HISTORY_DEBUG", "üîç ≈Åadowanie danych dla sesji: $sessionId")

        // Obserwacja danych z mapowaniem na imiona graczy
        pickRepo.getPicksForSession(sessionId!!).observe(this) { picks ->
            Log.d("HISTORY_DEBUG", "üìã Otrzymano ${picks.size} wybor√≥w gier:")

            lifecycleScope.launch {
                val picksWithNames = picks.map { pick ->
                    Log.d("HISTORY_DEBUG", "üîç Mapowanie playerId ${pick.playerId}")

                    val playerId = pick.playerId.toIntOrNull() ?: 0
                    val player = playerDao.getById(playerId)

                    Log.d("HISTORY_DEBUG", "üë§ Znaleziony gracz: ${player?.name ?: "NIEZNANY"}")

                    GamePickWithPlayerName(
                        playerName = player?.name ?: "Gracz #${pick.playerId}",
                        gameName = pick.gameName,
                        timestamp = pick.timestamp,
                        originalPick = pick
                    )
                }

                Log.d("HISTORY_DEBUG", "‚úÖ Zmapowane ${picksWithNames.size} wybor√≥w:")
                picksWithNames.forEach { display ->
                    Log.d("HISTORY_DEBUG", "  - ${display.playerName}: ${display.gameName}")
                }

                runOnUiThread {
                    adapter.submitList(picksWithNames)
                    // Poka≈º/ukryj przycisk cofania w zale≈ºno≈õci od tego czy sƒÖ wybory
                    undoButton.isEnabled = picksWithNames.isNotEmpty()
                }
            }
        }

        // Obs≈Çuga przycisku cofania
        undoButton.setOnClickListener {
            showUndoConfirmationDialog()
        }
    }

    private fun showUndoConfirmationDialog() {
        lifecycleScope.launch {
            val lastPick = pickRepo.getLastPick(sessionId!!)
            if (lastPick == null) {
                Toast.makeText(this@GameHistoryActivity, "Brak wybor√≥w do cofniƒôcia", Toast.LENGTH_SHORT).show()
                return@launch
            }

            runOnUiThread {
                AlertDialog.Builder(this@GameHistoryActivity)
                    .setTitle("Cofnij ostatni wyb√≥r")
                    .setMessage("Czy na pewno chcesz cofnƒÖƒá wyb√≥r: ${lastPick.gameName}?")
                    .setPositiveButton("Cofnij") { _, _ ->
                        performUndo()
                    }
                    .setNegativeButton("Anuluj", null)
                    .show()
            }
        }
    }

    private fun performUndo() {
        lifecycleScope.launch {
            try {
                val success = pickRepo.undoLastPick(sessionId!!, queueRepo)

                runOnUiThread {
                    if (success) {
                        Toast.makeText(this@GameHistoryActivity, "Cofniƒôto ostatni wyb√≥r", Toast.LENGTH_SHORT).show()
                    } else {
                        Toast.makeText(this@GameHistoryActivity, "Nie uda≈Ço siƒô cofnƒÖƒá wyboru", Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("HISTORY_DEBUG", "‚ùå B≈ÇƒÖd podczas cofania: ${e.message}", e)
                runOnUiThread {
                    Toast.makeText(this@GameHistoryActivity, "B≈ÇƒÖd: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }
}